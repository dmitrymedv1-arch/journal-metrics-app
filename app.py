# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: 512
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ: +12 —Å—Ç—Ä–æ–∫ (–¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è display_detailed_analysis)

import streamlit as st
import pandas as pd
import numpy as np
import time
from datetime import datetime
import calendar
import sys
import os
import re

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(__file__))

try:
    from journal_analyzer import (
        calculate_metrics_enhanced,
        calculate_metrics_fast,
        detect_journal_field,
        on_clear_cache_clicked
    )
    JOURNAL_ANALYZER_AVAILABLE = True
except ImportError as e:
    JOURNAL_ANALYZER_AVAILABLE = False
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ journal_analyzer: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    def calculate_metrics_enhanced(*args, **kwargs):
        return None
    def calculate_metrics_fast(*args, **kwargs):
        return None
    def detect_journal_field(*args, **kwargs):
        return "general"
    def on_clear_cache_clicked(*args, **kwargs):
        return "–ö—ç—à –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Journal Metrics Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #1E88E5;
        margin-bottom: 1rem;
    }
    .forecast-box {
        background-color: #e3f2fd;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #1E88E5;
    }
    .citescore-forecast-box {
        background-color: #e8f5e8;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #4CAF50;
    }
    .warning-box {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #ffc107;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    .section-header {
        color: #1E88E5;
        border-bottom: 2px solid #1E88E5;
        padding-bottom: 0.5rem;
        margin-top: 2rem;
    }
    .mode-indicator {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: bold;
        display: inline-block;
        margin-bottom: 1rem;
    }
    .fast-mode {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }
    .precise-mode {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }
</style>
""", unsafe_allow_html=True)

def validate_issn(issn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ISSN"""
    if not issn:
        return False
    pattern = r'^\d{4}-\d{3}[\dXx]$'
    return re.match(pattern, issn) is not None

def main():
    if not JOURNAL_ANALYZER_AVAILABLE:
        st.warning("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")
    
    st.markdown('<h1 class="main-header">üìä Journal Metrics Analyzer </h1>', unsafe_allow_html=True)
    
    with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏–∑–∞"):
        st.markdown("""
        **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∞–Ω–∞–ª–∏–∑–∞:**
        
        üöÄ **–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (Fast Analysis)**
        - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 10-30 —Å–µ–∫—É–Ω–¥
        - –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        
        üéØ **–¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (Precise Analysis)** 
        - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 2-5 –º–∏–Ω—É—Ç
        - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
        - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
        - –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        - –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        
        ¬©Chimica Techno Acta, https://chimicatechnoacta.ru / ¬©developed by daM
        """)
    
    with st.sidebar:
        st.header("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        issn_input = st.text_input(
            "ISSN –∂—É—Ä–Ω–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: XXXX-XXXX):",
            value="2411-1414",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1548-7660",
            help="–í–≤–µ–¥–∏—Ç–µ ISSN –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX-XXXX"
        )
        
        analysis_mode = st.radio(
            "–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞:",
            ["üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (Fast Analysis)", "üéØ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (Precise Analysis)"],
            help="–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ - 10-30 —Å–µ–∫, –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - 2-5 –º–∏–Ω"
        )
        
        use_cache = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à", value=True,
                               help="–£—Å–∫–æ—Ä—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã —Ç–æ–≥–æ –∂–µ –∂—É—Ä–Ω–∞–ª–∞")
        
        analyze_button = st.button(
            "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
            type="primary",
            use_container_width=True
        )
        
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", use_container_width=True):
            result_msg = on_clear_cache_clicked(None)
            st.success(result_msg)
        
        st.markdown("---")
        st.markdown("""
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**
        - Crossref API
        - OpenAlex API (–≤ —Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """)
    
    if analyze_button:
        if not issn_input:
            st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ISSN –∂—É—Ä–Ω–∞–ª–∞")
            return
        
        if not validate_issn(issn_input):
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ISSN. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: XXXX-XXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1548-7660)")
            return
        
        mode_class = "precise-mode" if "–¢–æ—á–Ω—ã–π" in analysis_mode else "fast-mode"
        mode_text = "üéØ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑" if "–¢–æ—á–Ω—ã–π" in analysis_mode else "üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑"
        st.markdown(f'<div class="mode-indicator {mode_class}">{mode_text}</div>', unsafe_allow_html=True)
        
        is_precise_mode = "–¢–æ—á–Ω—ã–π" in analysis_mode
        analysis_function = calculate_metrics_enhanced if is_precise_mode else calculate_metrics_fast
        
        if is_precise_mode:
            st.info("""
            ‚è≥ **–¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-5 –º–∏–Ω—É—Ç**
            
            –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è:
            - –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä —Å—Ç–∞—Ç–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            - –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π  
            - –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            - –†–∞—Å—á–µ—Ç –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            """)
        
        try:
            if is_precise_mode:
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                def update_progress(progress):
                    progress_bar.progress(min(progress, 1.0))
                    status_text.text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {int(progress * 100)}%")
                
                start_time = time.time()
                status_text.text("üîç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
                result = analysis_function(issn_input, "–ù–µ —É–∫–∞–∑–∞–Ω–æ", use_cache, progress_callback=update_progress)
                analysis_time = time.time() - start_time
                
                if result is None:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∂—É—Ä–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—å—è—Ö.")
                    status_text.text("–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
                    return
                
                status_text.text(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.1f} —Å–µ–∫—É–Ω–¥!")
            else:
                with st.spinner("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..."):
                    start_time = time.time()
                    result = analysis_function(issn_input, "–ù–µ —É–∫–∞–∑–∞–Ω–æ", use_cache)
                    analysis_time = time.time() - start_time
                
                if result is None:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∂—É—Ä–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç–µ–π.")
                    return
                
                st.success(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.1f} —Å–µ–∫—É–Ω–¥!")
            
            display_results(result, is_precise_mode)
        
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π ISSN –∂—É—Ä–Ω–∞–ª–∞")

def display_results(result, is_precise_mode):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞", result['journal_name'])
    with col2:
        st.metric("ISSN", result['issn'])
    with col3:
        st.metric("–û–±–ª–∞—Å—Ç—å", result['journal_field'])
    with col4:
        mode_text = "üéØ –¢–æ—á–Ω—ã–π" if is_precise_mode else "üöÄ –ë—ã—Å—Ç—Ä—ã–π"
        st.metric("–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞", mode_text)
    
    st.markdown("---")
    
    tab_names = ["üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã"]
    if is_precise_mode:
        tab_names.insert(1, "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    tabs = st.tabs(tab_names)
    
    with tabs[0]:
        display_main_metrics(result, is_precise_mode)
    
    if is_precise_mode:
        with tabs[1]:
            display_detailed_analysis(result)
        with tabs[2]:
            display_statistics(result)
        with tabs[3]:
            display_parameters(result, is_precise_mode)
    else:
        with tabs[1]:
            display_statistics(result)
        with tabs[2]:
            display_parameters(result, is_precise_mode)

def display_main_metrics(result, is_precise_mode):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    
    st.markdown('<h3 class="section-header">üéØ –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä 2025</h3>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "–¢–µ–∫—É—â–∏–π –ò–§", 
            f"{result['current_if']:.2f}",
            help="–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        )
    
    with col2:
        st.metric(
            "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", 
            f"{result['if_forecasts']['balanced']:.2f}",
            help="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–æ–Ω–µ—Ü 2025 –≥–æ–¥–∞"
        )
    
    with col3:
        st.metric(
            "–°—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", 
            f"{result['total_articles_if']}",
            help=f"–°—Ç–∞—Ç—å–∏ –∑–∞ {result['if_publication_years'][0]}-{result['if_publication_years'][1]}"
        )
    
    st.markdown("#### –ü—Ä–æ–≥–Ω–æ–∑—ã –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä–∞ –Ω–∞ –∫–æ–Ω–µ—Ü 2025")
    
    forecast_col1, forecast_col2, forecast_col3 = st.columns(3)
    
    with forecast_col1:
        st.markdown('<div class="forecast-box">', unsafe_allow_html=True)
        st.metric("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π", f"{result['if_forecasts']['conservative']:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with forecast_col2:
        st.markdown('<div class="forecast-box">', unsafe_allow_html=True)
        st.metric("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", f"{result['if_forecasts']['balanced']:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with forecast_col3:
        st.markdown('<div class="forecast-box">', unsafe_allow_html=True)
        st.metric("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", f"{result['if_forecasts']['optimistic']:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    if is_precise_mode:
        st.markdown("#### –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä–∞ (95%)")
        ci_lower = result['if_forecasts_ci']['lower_95']
        ci_upper = result['if_forecasts_ci']['upper_95']
        st.info(f"**–î–∏–∞–ø–∞–∑–æ–Ω:** [{ci_lower:.2f} - {ci_upper:.2f}]")
    
    st.markdown("---")
    
    st.markdown('<h3 class="section-header">üìä CiteScore 2025</h3>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–¢–µ–∫—É—â–∏–π CiteScore", f"{result['current_citescore']:.2f}")
    
    with col2:
        st.metric("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", f"{result['citescore_forecasts']['balanced']:.2f}")
    
    with col3:
        st.metric("–°—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", f"{result['total_articles_cs']}",
                 help=f"–°—Ç–∞—Ç—å–∏ –∑–∞ {result['cs_publication_years'][0]}-{result['cs_publication_years'][-1]}")
    
    st.markdown("#### –ü—Ä–æ–≥–Ω–æ–∑—ã CiteScore –Ω–∞ –∫–æ–Ω–µ—Ü 2025")
    
    forecast_col1, forecast_col2, forecast_col3 = st.columns(3)
    
    with forecast_col1:
        st.markdown('<div class="citescore-forecast-box">', unsafe_allow_html=True)
        st.metric("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π", f"{result['citescore_forecasts']['conservative']:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with forecast_col2:
        st.markdown('<div class="citescore-forecast-box">', unsafe_allow_html=True)
        st.metric("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", f"{result['citescore_forecasts']['balanced']:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with forecast_col3:
        st.markdown('<div class="citescore-forecast-box">', unsafe_allow_html=True)
        st.metric("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", f"{result['citescore_forecasts']['optimistic']:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    if is_precise_mode:
        st.markdown("#### –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã CiteScore (95%)")
        cs_ci_lower = result['citescore_forecasts_ci']['lower_95']
        cs_ci_upper = result['citescore_forecasts_ci']['upper_95']
        st.info(f"**–î–∏–∞–ø–∞–∑–æ–Ω:** [{cs_ci_lower:.2f} - {cs_ci_upper:.2f}]")

def display_detailed_analysis(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π")
        
        if result['if_citation_data']:
            if_data = pd.DataFrame(result['if_citation_data'])
            if_data = if_data[['DOI', '–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Crossref)', '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (OpenAlex)', '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 2025 –≥–æ–¥—É']]
            st.dataframe(if_data, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –¥–ª—è –∏–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä–∞")
    
    with col2:
        st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π")
        
        self_citation_rate = result['self_citation_rate']
        
        st.metric("–£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", f"{self_citation_rate:.1%}")
        st.metric("–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{result['total_self_citations']:.0f}")
        
        if self_citation_rate > 0.2:
            st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (>20%)")
        elif self_citation_rate > 0.1:
            st.info("‚ÑπÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (10-20%)")
        else:
            st.success("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (<10%)")
    
    if result['citation_model_data']:
        st.subheader("üìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π")
        st.info(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(result['citation_model_data'])} –ª–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

def display_statistics(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—å—è–º")
    
    if result['if_citation_data']:
        st.markdown("#### –î–ª—è –∏–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä–∞")
        df_if = pd.DataFrame(result['if_citation_data'])
        if_stats = df_if.groupby('–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏').agg({
            'DOI': 'count',
            '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Crossref)': ['sum', 'mean', 'std'],
            '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (OpenAlex)': ['sum', 'mean', 'std'],
            '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 2025 –≥–æ–¥—É': ['sum', 'mean', 'std']
        }).round(2)
        if_stats.columns = [
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π',
            '–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (Crossref)', '–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (Crossref)', '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (Crossref)',
            '–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (OpenAlex)', '–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (OpenAlex)', '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (OpenAlex)',
            '–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –≤ 2025', '–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –≤ 2025', '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ 2025'
        ]
        st.dataframe(if_stats, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—å—è—Ö –¥–ª—è –∏–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä–∞")
    
    if result['cs_citation_data']:
        st.markdown("#### –î–ª—è CiteScore")
        df_cs = pd.DataFrame(result['cs_citation_data'])
        cs_stats = df_cs.groupby('–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏').agg({
            'DOI': 'count',
            '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Crossref)': ['sum', 'mean', 'std'],
            '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (OpenAlex)': ['sum', 'mean', 'std'],
            '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 2025 –≥–æ–¥—É': ['sum', 'mean', 'std']
        }).round(2)
        cs_stats.columns = [
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π',
            '–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (Crossref)', '–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (Crossref)', '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (Crossref)',
            '–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (OpenAlex)', '–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (OpenAlex)', '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (OpenAlex)',
            '–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –≤ 2025', '–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –≤ 2025', '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ 2025'
        ]
        st.dataframe(cs_stats, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—å—è—Ö –¥–ª—è CiteScore")

def display_parameters(result, is_precise_mode):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
    
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ü–µ—Ä–∏–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞:**")
        st.write(f"- –ò–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä: {result['if_publication_years'][0]}-{result['if_publication_years'][1]}")
        st.write(f"- CiteScore: {result['cs_publication_years'][0]}-{result['cs_publication_years'][-1]}")
        
        st.markdown("**–ê–Ω–∞–ª–∏–∑ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π:**")
        st.write(f"- –£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π: {result['self_citation_rate']:.1%}")
        st.write(f"- –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result['total_self_citations']}")
    
    with col2:
        st.markdown("**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:**")
        st.write(result['analysis_date'].strftime('%d.%m.%Y'))
        
        st.markdown("**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞:**")
        st.write(f"- –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π: {result['multipliers']['conservative']:.2f}x")
        st.write(f"- –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {result['multipliers']['balanced']:.2f}x")
        st.write(f"- –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π: {result['multipliers']['optimistic']:.2f}x")
        
        if is_precise_mode:
            st.markdown("**–ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞:**")
            st.success("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏")
        else:
            st.markdown("**–ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞:**")
            st.info("‚ÑπÔ∏è –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏")

if __name__ == "__main__":
    main()
