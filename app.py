# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: 510
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: KeyError + TypeError + Streamlit Cloud —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

import streamlit as st
import pandas as pd
import numpy as np
import time
from datetime import datetime
import calendar
import sys
import os
import re

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(__file__))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ë–ï–ó –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ (Streamlit Cloud)
try:
    import aiohttp
    AIOHTTP_AVAILABLE = True
except ImportError:
    AIOHTTP_AVAILABLE = False

try:
    import plotly.express as px
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç journal_analyzer —Å fallback
JOURNAL_ANALYZER_AVAILABLE = False
try:
    from journal_analyzer import (
        calculate_metrics_enhanced,
        calculate_metrics_fast,
        calculate_metrics_dynamic,
        detect_journal_field,
        on_clear_cache_clicked
    )
    JOURNAL_ANALYZER_AVAILABLE = True
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ journal_analyzer: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    def calculate_metrics_enhanced(*args, **kwargs): return None
    def calculate_metrics_fast(*args, **kwargs): return None
    def calculate_metrics_dynamic(*args, **kwargs): return None
    def detect_journal_field(*args, **kwargs): return "general"
    def on_clear_cache_clicked(*args, **kwargs): return "–ö—ç—à –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Journal Metrics Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #1E88E5;
        margin-bottom: 1rem;
    }
    .forecast-box {
        background-color: #e3f2fd;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #1E88E5;
    }
    .citescore-forecast-box {
        background-color: #e8f5e8;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border-left: 4px solid #4CAF50;
    }
    .warning-box {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #ffc107;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    .section-header {
        color: #1E88E5;
        border-bottom: 2px solid #1E88E5;
        padding-bottom: 0.5rem;
        margin-top: 2rem;
    }
    .mode-indicator {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: bold;
        display: inline-block;
        margin-bottom: 1rem;
    }
    .fast-mode {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }
    .precise-mode {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }
    .dynamic-mode {
        background-color: #e1bee7;
        color: #4a148c;
        border: 1px solid #ce93d8;
    }
    .self-citation-highlight {
        background-color: #ffebee !important;
    }
</style>
""", unsafe_allow_html=True)

def validate_issn(issn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ISSN"""
    if not issn:
        return False
    pattern = r'^\d{4}-\d{3}[\dXx]$'
    return re.match(pattern, issn) is not None

def main():
    # –°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    status_col1, status_col2, status_col3 = st.columns(3)
    with status_col1:
        st.metric("üìö journal_analyzer", "‚úÖ" if JOURNAL_ANALYZER_AVAILABLE else "‚ùå")
    with status_col2:
        st.metric("üåê aiohttp", "‚úÖ" if AIOHTTP_AVAILABLE else "‚ùå")
    with status_col3:
        st.metric("üìä Plotly", "‚úÖ" if PLOTLY_AVAILABLE else "‚ùå")
    
    if not JOURNAL_ANALYZER_AVAILABLE:
        st.warning("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")
    
    st.markdown('<h1 class="main-header">üìä Journal Metrics Analyzer </h1>', unsafe_allow_html=True)
    
    with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏–∑–∞"):
        st.markdown("""
        **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∞–Ω–∞–ª–∏–∑–∞:**
        
        üöÄ **–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (Fast Analysis)**
        - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 10-30 —Å–µ–∫—É–Ω–¥
        - –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ Crossref
        - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        
        üéØ **–¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (Precise Analysis)** 
        - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 15-45 —Å–µ–∫—É–Ω–¥
        - CiteScore —á–µ—Ä–µ–∑ Crossref
        - –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ OpenAlex (batch-–∑–∞–ø—Ä–æ—Å—ã)
        - –í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        - –†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
        - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        
        üåê **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (Dynamic Analysis)**
        - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 15-45 —Å–µ–∫—É–Ω–¥
        - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã (18-6 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ò–§)
        - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAlex batch
        - –í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        - –†–µ–∞–ª—å–Ω—ã–µ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
        - Python 3.8+
        - `pip install -r requirements.txt`
        
        ¬©Chimica Techno Acta, https://chimicatechnoacta.ru / ¬©developed by daM
        """)
    
    with st.sidebar:
        st.header("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        issn_input = st.text_input(
            "ISSN –∂—É—Ä–Ω–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: XXXX-XXXX):",
            value="2411-1414",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1548-7660",
            help="–í–≤–µ–¥–∏—Ç–µ ISSN –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX-XXXX"
        )
        
        analysis_mode = st.radio(
            "–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞:",
            ["üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (Fast Analysis)",
             "üéØ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (Precise Analysis)",
             "üåê –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (Dynamic Analysis)"],
            help="–ë—ã—Å—Ç—Ä—ã–π: 10-30 —Å–µ–∫, –¢–æ—á–Ω—ã–π/–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π: 15-45 —Å–µ–∫"
        )
        
        use_cache = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à", value=True,
                               help="–£—Å–∫–æ—Ä—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã —Ç–æ–≥–æ –∂–µ –∂—É—Ä–Ω–∞–ª–∞")
        
        analyze_button = st.button(
            "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
            type="primary",
            use_container_width=True
        )
        
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", use_container_width=True):
            result_msg = on_clear_cache_clicked(None)
            st.success(result_msg)
        
        st.markdown("---")
        st.markdown("""
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**
        - Crossref API
        - OpenAlex API (batch-–∑–∞–ø—Ä–æ—Å—ã –¥–æ 200 DOI)
        - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """)
    
    if analyze_button:
        if not issn_input:
            st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ISSN –∂—É—Ä–Ω–∞–ª–∞")
            return
        
        if not validate_issn(issn_input):
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ISSN. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: XXXX-XXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1548-7660)")
            return
        
        # Fallback –Ω–∞ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–µ—Ç aiohttp
        if not AIOHTTP_AVAILABLE:
            st.warning("‚ö†Ô∏è aiohttp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑.")
            analysis_mode = "üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑"
        
        mode_key = analysis_mode.split()[1]
        mode_class = {
            "–ë—ã—Å—Ç—Ä—ã–π": "fast-mode",
            "–¢–æ—á–Ω—ã–π": "precise-mode",
            "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π": "dynamic-mode"
        }[mode_key]
        mode_text = analysis_mode
        
        st.markdown(f'<div class="mode-indicator {mode_class}">{mode_text}</div>', unsafe_allow_html=True)
        
        is_precise_mode = mode_key == "–¢–æ—á–Ω—ã–π"
        is_dynamic_mode = mode_key == "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π"
        analysis_function = (
            calculate_metrics_dynamic if is_dynamic_mode else
            calculate_metrics_enhanced if is_precise_mode else
            calculate_metrics_fast
        )
        
        if is_precise_mode or is_dynamic_mode:
            st.info("""
            ‚è≥ **–ê–Ω–∞–ª–∏–∑ –∑–∞–π–º–µ—Ç 15-45 —Å–µ–∫—É–Ω–¥** (—É—Å–∫–æ—Ä–µ–Ω–æ –≤ 5-10 —Ä–∞–∑)
            
            –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è:
            - –°–±–æ—Ä —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ Crossref (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            - Batch-–∞–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π OpenAlex (200 DOI –∑–∞ –∑–∞–ø—Ä–æ—Å)
            - –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            - –ê–Ω–∞–ª–∏–∑ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
            """)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ë–ï–ó –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            def update_progress(progress):
                """–ü–†–û–°–¢–û–ô –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
                progress_bar.progress(min(progress, 1.0))
                status_text.text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {int(progress * 100)}%")
            
            start_time = time.time()
            status_text.text("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω...")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º None –¥–ª—è progress_callback –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥
            result = analysis_function(issn_input, "Chimica Techno Acta", use_cache)
            analysis_time = time.time() - start_time
            
            # ‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ü–û–°–õ–ï –∞–Ω–∞–ª–∏–∑–∞
            for i in range(100):
                time.sleep(0.01)
                update_progress(i / 100)
            
            if result is None:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                status_text.text("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
                st.info("""
                **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
                - –ñ—É—Ä–Ω–∞–ª –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤ Crossref
                - –ü—Ä–æ–±–ª–µ–º—ã —Å API (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ)
                - –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à (–æ—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à)
                """)
                st.info("‚úÖ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:** ISSN 2411-1414 (28 —Å–µ–∫), 0028-0836 Nature (22 —Å–µ–∫)")
                return
            
            status_text.text(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.1f} —Å–µ–∫—É–Ω–¥!")
            st.success(f"**–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.1f}—Å**")
            
        else:
            with st.spinner("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..."):
                start_time = time.time()
                result = analysis_function(issn_input, "Chimica Techno Acta", use_cache)
                analysis_time = time.time() - start_time
            
            if result is None:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                st.info("""
                **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
                - –ñ—É—Ä–Ω–∞–ª –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤ Crossref
                - –ü—Ä–æ–±–ª–µ–º—ã —Å API
                - –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
                """)
                return
            
            st.success(f"**–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.1f} —Å–µ–∫—É–Ω–¥!**")
        
        display_results(result, is_precise_mode, is_dynamic_mode)

def display_results(result, is_precise_mode, is_dynamic_mode):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞", result['journal_name'])
    with col2:
        st.metric("ISSN", result['issn'])
    with col3:
        st.metric("–û–±–ª–∞—Å—Ç—å", result['journal_field'])
    with col4:
        mode_text = "üåê –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π" if is_dynamic_mode else "üéØ –¢–æ—á–Ω—ã–π" if is_precise_mode else "üöÄ –ë—ã—Å—Ç—Ä—ã–π"
        st.metric("–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞", mode_text)
    
    st.markdown("---")
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–æ–≤
    tab_names = ["üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã"]
    if is_precise_mode or is_dynamic_mode:
        tab_names.insert(1, "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    tabs = st.tabs(tab_names)
    
    with tabs[0]:
        display_main_metrics(result, is_precise_mode, is_dynamic_mode)
    
    if is_precise_mode or is_dynamic_mode:
        with tabs[1]:
            display_detailed_analysis(result)
        with tabs[2]:
            display_statistics(result)
        with tabs[3]:
            display_parameters(result, is_precise_mode, is_dynamic_mode)
    else:
        with tabs[1]:
            display_statistics(result)
        with tabs[2]:
            display_parameters(result, is_precise_mode, is_dynamic_mode)

def display_main_metrics(result, is_precise_mode, is_dynamic_mode):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    
    st.markdown('<h3 class="section-header">üéØ –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä</h3>', unsafe_allow_html=True)
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "–¢–µ–∫—É—â–∏–π –ò–§", 
            f"{result['current_if']:.2f}",
            help="–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π"
        )
    
    with col2:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï KeyError: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
        if is_dynamic_mode and 'if_publication_period' in result:
            period_text = (f"{result['if_publication_period'][0].strftime('%Y-%m')}‚Äì"
                          f"{result['if_publication_period'][1].strftime('%Y-%m')}")
        else:
            period_text = f"{result['if_publication_years'][0]}‚Äì{result['if_publication_years'][1]}"
        st.metric("–°—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", f"{result['total_articles_if']}", help=f"–°—Ç–∞—Ç—å–∏ –∑–∞ {period_text}")
    
    with col3:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï KeyError: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if is_dynamic_mode and 'if_citation_period' in result:
            period_text = (f"{result['if_citation_period'][0].strftime('%Y-%m')}‚Äì"
                          f"{result['if_citation_period'][1].strftime('%Y-%m')}")
        else:
            period_text = f"{result.get('if_citation_period', [2025])[0]}"
        st.metric("–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", f"{result['total_cites_if']}", help=f"–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ {period_text}")
    
    with col4:
        self_rate = result['self_citations_if'] / max(result['total_cites_if'], 1)
        st.metric("–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", f"{self_rate:.1%}", delta=f"{result['self_citations_if']}")
        if self_rate > 0.2:
            st.markdown('<div class="warning-box">‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (>20%)</div>', unsafe_allow_html=True)
        elif self_rate > 0.1:
            st.markdown('<div class="warning-box">‚ÑπÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π</div>', unsafe_allow_html=True)
    
    with col5:
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ/–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ)
        if is_precise_mode or is_dynamic_mode:
            if_data = pd.DataFrame(result['if_citation_data'])
            time_data = if_data.dropna(subset=['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'])
            if not time_data.empty:
                time_data['pub_date'] = pd.to_datetime(time_data['–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'].astype(str) + '-01-01')
                time_data['cite_date'] = pd.to_datetime(time_data['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'])
                time_data['days_to_cite'] = (time_data['cite_date'] - time_data['pub_date']).dt.days
                median_days = time_data['days_to_cite'].median()
                st.metric("‚è±Ô∏è –ú–µ–¥–∏–∞–Ω–∞ –¥–æ —Ü–∏—Ç–∞—Ç—ã", f"{median_days:.0f} –¥–Ω–µ–π")
            else:
                st.metric("‚è±Ô∏è –ú–µ–¥–∏–∞–Ω–∞ –¥–æ —Ü–∏—Ç–∞—Ç—ã", "N/A")
        else:
            st.metric("‚è±Ô∏è –ú–µ–¥–∏–∞–Ω–∞ –¥–æ —Ü–∏—Ç–∞—Ç—ã", "N/A")
    
    if is_precise_mode and not is_dynamic_mode and 'if_forecasts' in result:
        st.markdown("#### –ü—Ä–æ–≥–Ω–æ–∑—ã –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä–∞ –Ω–∞ –∫–æ–Ω–µ—Ü 2025")
        forecast_col1, forecast_col2, forecast_col3 = st.columns(3)
        
        with forecast_col1:
            st.markdown('<div class="forecast-box">', unsafe_allow_html=True)
            st.metric("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π", f"{result['if_forecasts']['conservative']:.2f}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with forecast_col2:
            st.markdown('<div class="forecast-box">', unsafe_allow_html=True)
            st.metric("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", f"{result['if_forecasts']['balanced']:.2f}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with forecast_col3:
            st.markdown('<div class="forecast-box">', unsafe_allow_html=True)
            st.metric("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", f"{result['if_forecasts']['optimistic']:.2f}")
            st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("---")
    
    st.markdown('<h3 class="section-header">üìä CiteScore</h3>', unsafe_allow_html=True)
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("–¢–µ–∫—É—â–∏–π CiteScore", f"{result['current_citescore']:.2f}")
    
    with col2:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï KeyError
        if is_dynamic_mode and 'cs_publication_period' in result:
            period_text = (f"{result['cs_publication_period'][0].strftime('%Y-%m')}‚Äì"
                          f"{result['cs_publication_period'][1].strftime('%Y-%m')}")
        else:
            period_text = f"{result['cs_publication_years'][0]}‚Äì{result['cs_publication_years'][-1]}"
        st.metric("–°—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", f"{result['total_articles_cs']}", help=f"–°—Ç–∞—Ç—å–∏ –∑–∞ {period_text}")
    
    with col3:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï KeyError
        if is_dynamic_mode and 'cs_citation_period' in result:
            period_text = (f"{result['cs_citation_period'][0].strftime('%Y-%m')}‚Äì"
                          f"{result['cs_citation_period'][1].strftime('%Y-%m')}")
        else:
            period_text = f"{result['cs_publication_years'][0]}‚Äì{result['cs_publication_years'][-1]}"
        st.metric("–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", f"{result['total_cites_cs']}", help=f"–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ {period_text}")
    
    with col4:
        self_rate_cs = result['self_citations_cs'] / max(result['total_cites_cs'], 1)
        st.metric("–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", f"{self_rate_cs:.1%}", delta=f"{result['self_citations_cs']}")
    
    with col5:
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CS
        if is_precise_mode or is_dynamic_mode:
            cs_data = pd.DataFrame(result['cs_citation_data'])
            time_cs_data = cs_data.dropna(subset=['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'])
            if not time_cs_data.empty:
                time_cs_data['pub_date'] = pd.to_datetime(time_cs_data['–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'].astype(str) + '-01-01')
                time_cs_data['cite_date'] = pd.to_datetime(time_cs_data['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'])
                time_cs_data['days_to_cite'] = (time_cs_data['cite_date'] - time_cs_data['pub_date']).dt.days
                median_days_cs = time_cs_data['days_to_cite'].median()
                st.metric("‚è±Ô∏è –ú–µ–¥–∏–∞–Ω–∞ –¥–æ —Ü–∏—Ç–∞—Ç—ã", f"{median_days_cs:.0f} –¥–Ω–µ–π")
            else:
                st.metric("‚è±Ô∏è –ú–µ–¥–∏–∞–Ω–∞ –¥–æ —Ü–∏—Ç–∞—Ç—ã", "N/A")
        else:
            st.metric("‚è±Ô∏è –ú–µ–¥–∏–∞–Ω–∞ –¥–æ —Ü–∏—Ç–∞—Ç—ã", "N/A")
    
    if is_precise_mode and not is_dynamic_mode and 'citescore_forecasts' in result:
        st.markdown("#### –ü—Ä–æ–≥–Ω–æ–∑—ã CiteScore –Ω–∞ –∫–æ–Ω–µ—Ü 2025")
        forecast_col1, forecast_col2, forecast_col3 = st.columns(3)
        
        with forecast_col1:
            st.markdown('<div class="citescore-forecast-box">', unsafe_allow_html=True)
            st.metric("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π", f"{result['citescore_forecasts']['conservative']:.2f}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with forecast_col2:
            st.markdown('<div class="citescore-forecast-box">', unsafe_allow_html=True)
            st.metric("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", f"{result['citescore_forecasts']['balanced']:.2f}")
            st.markdown('</div>', unsafe_allow_html=True)
        
        with forecast_col3:
            st.markdown('<div class="citescore-forecast-box">', unsafe_allow_html=True)
            st.metric("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", f"{result['citescore_forecasts']['optimistic']:.2f}")
            st.markdown('</div>', unsafe_allow_html=True)

def display_detailed_analysis(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä: –î–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç–µ–π")
        
        if result['if_citation_data']:
            df_if = pd.DataFrame(result['if_citation_data'])
            df_if['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'] = df_if['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'].fillna('–ù–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å')
            
            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ —Å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            def highlight_self_cite(row):
                if row['–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'] == '–î–∞':
                    return ['background-color: #ffebee'] * len(row)
                return [''] * len(row)
            
            styled_df = df_if.style.apply(highlight_self_cite, axis=1)
            st.dataframe(styled_df, use_container_width=True, height=400)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –¥–ª—è –∏–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä–∞")
    
    with col2:
        st.subheader("üìä CiteScore: –î–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç–µ–π")
        
        if result['cs_citation_data']:
            df_cs = pd.DataFrame(result['cs_citation_data'])
            df_cs['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'] = df_cs['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'].fillna('–ù–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å')
            
            def highlight_self_cite(row):
                if row['–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'] == '–î–∞':
                    return ['background-color: #ffebee'] * len(row)
                return [''] * len(row)
            
            styled_df_cs = df_cs.style.apply(highlight_self_cite, axis=1)
            st.dataframe(styled_df_cs, use_container_width=True, height=400)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –¥–ª—è CiteScore")

def display_statistics(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—å—è–º")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–§
    if result['if_citation_data']:
        st.markdown("#### –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä")
        df_if = pd.DataFrame(result['if_citation_data'])
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥—É
        if_stats = df_if.groupby('–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏').agg({
            'DOI': 'count',
            '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ': ['sum', 'mean', 'std'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π': 'sum'
        }).round(2)
        
        if_stats.columns = [
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π',
            '–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π', '–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π', '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
            '–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        ]
        if_stats['–î–æ–ª—è —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π'] = (if_stats['–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'] / 
                                         if_stats['–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π']).round(3)
        
        st.dataframe(if_stats, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
        if len(df_if) > 1 and PLOTLY_AVAILABLE:
            st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (–ò–§)**")
            fig_if = px.histogram(df_if, x='–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ', 
                                nbins=20, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π")
            st.plotly_chart(fig_if, use_container_width=True)
        elif len(df_if) > 1:
            st.bar_chart(df_if['–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ'])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CS
    if result['cs_citation_data']:
        st.markdown("#### CiteScore")
        df_cs = pd.DataFrame(result['cs_citation_data'])
        
        cs_stats = df_cs.groupby('–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏').agg({
            'DOI': 'count',
            '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ': ['sum', 'mean', 'std'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π': 'sum'
        }).round(2)
        
        cs_stats.columns = [
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π',
            '–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π', '–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π', '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
            '–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        ]
        cs_stats['–î–æ–ª—è —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π'] = (cs_stats['–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'] / 
                                         cs_stats['–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π']).round(3)
        
        st.dataframe(cs_stats, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if len(df_cs) > 1 and PLOTLY_AVAILABLE:
            st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (CS)**")
            fig_cs = px.histogram(df_cs, x='–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ', 
                                nbins=20, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π")
            st.plotly_chart(fig_cs, use_container_width=True)
        elif len(df_cs) > 1:
            st.bar_chart(df_cs['–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ'])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if is_precise_mode or is_dynamic_mode:
        st.subheader("‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä**")
            if_data = pd.DataFrame(result['if_citation_data'])
            time_if = if_data.dropna(subset=['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'])
            
            if not time_if.empty:
                time_if['pub_date'] = pd.to_datetime(time_if['–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'].astype(str) + '-01-01')
                time_if['cite_date'] = pd.to_datetime(time_if['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'])
                time_if['days_to_cite'] = (time_if['cite_date'] - time_if['pub_date']).dt.days
                
                st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{time_if['days_to_cite'].median():.0f} –¥–Ω–µ–π")
                st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{time_if['days_to_cite'].mean():.0f} –¥–Ω–µ–π")
                st.bar_chart(time_if['days_to_cite'])
        
        with col2:
            st.markdown("**CiteScore**")
            cs_data = pd.DataFrame(result['cs_citation_data'])
            time_cs = cs_data.dropna(subset=['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'])
            
            if not time_cs.empty:
                time_cs['pub_date'] = pd.to_datetime(time_cs['–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'].astype(str) + '-01-01')
                time_cs['cite_date'] = pd.to_datetime(time_cs['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'])
                time_cs['days_to_cite'] = (time_cs['cite_date'] - time_cs['pub_date']).dt.days
                
                st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{time_cs['days_to_cite'].median():.0f} –¥–Ω–µ–π")
                st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{time_cs['days_to_cite'].mean():.0f} –¥–Ω–µ–π")
                st.bar_chart(time_cs['days_to_cite'])

def display_parameters(result, is_precise_mode, is_dynamic_mode):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
    
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ü–µ—Ä–∏–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞:**")
        if is_dynamic_mode and 'if_publication_period' in result:
            st.write(f"**–ò–§ (—Å—Ç–∞—Ç—å–∏):** {result['if_publication_period'][0].strftime('%Y-%m-%d')} ‚Äì {result['if_publication_period'][1].strftime('%Y-%m-%d')}")
            st.write(f"**–ò–§ (—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):** {result['if_citation_period'][0].strftime('%Y-%m-%d')} ‚Äì {result['if_citation_period'][1].strftime('%Y-%m-%d')}")
            st.write(f"**CS (—Å—Ç–∞—Ç—å–∏/—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):** {result['cs_publication_period'][0].strftime('%Y-%m-%d')} ‚Äì {result['cs_publication_period'][1].strftime('%Y-%m-%d')}")
        else:
            st.write(f"**–ò–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä:** {result['if_publication_years'][0]}‚Äì{result['if_publication_years'][1]}")
            st.write(f"**CiteScore:** {result['cs_publication_years'][0]}‚Äì{result['cs_publication_years'][-1]}")
        
        st.markdown("**–ê–Ω–∞–ª–∏–∑ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π:**")
        st.write(f"**–ò–§:** {result['self_citations_if']} ({result['self_citation_rate']:.1%})")
        st.write(f"**CS:** {result['self_citations_cs']}")
    
    with col2:
        st.markdown("**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:**")
        st.write(result['analysis_date'].strftime('%d.%m.%Y %H:%M'))
        
        if is_precise_mode and not is_dynamic_mode and 'multipliers' in result:
            st.markdown("**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞:**")
            for scenario in ['conservative', 'balanced', 'optimistic']:
                st.write(f"**{scenario.title()}:** {result['multipliers'][scenario]:.2f}x")
        
        st.markdown("**–ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞:**")
        if is_dynamic_mode:
            st.success("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å OpenAlex batch-–∑–∞–ø—Ä–æ—Å–∞–º–∏")
        elif is_precise_mode:
            st.success("‚úÖ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: OpenAlex batch + Crossref")
        else:
            st.info("‚ÑπÔ∏è –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Crossref")
        
        st.markdown("**–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:**")
        st.info("‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã + Batch OpenAlex (200 DOI)")

if __name__ == "__main__":
    main()
