import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import numpy as np
from datetime import date
import time
import os
from journal_analyzer import (
    calculate_metrics_fast, calculate_metrics_enhanced, 
    calculate_metrics_dynamic, on_clear_cache_clicked
)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´ ====================
st.set_page_config(
    page_title="–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ò–§/CS",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ==================== CSS –°–¢–ò–õ–ò ====================
st.markdown("""
<style>
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .dynamic-mode {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        border: 2px solid #38ef7d;
    }
    .fast-mode {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }
    .precise-mode {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }
    .stMetric > label {
        font-size: 1.2rem !important;
        color: white !important;
    }
    .stMetric > div > div {
        font-size: 2.5rem !important;
        color: white !important;
    }
</style>
""", unsafe_allow_html=True)

# ==================== SIDEBAR ====================
st.sidebar.title("üîß –ù–ê–°–¢–†–û–ô–ö–ò")
st.sidebar.markdown("---")

# ISSN –í–í–û–î
issn = st.sidebar.text_input(
    "üìñ ISSN –∂—É—Ä–Ω–∞–ª–∞", 
    value="2411-1414",
    help="–í–≤–µ–¥–∏—Ç–µ ISSN –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2411-1414"
)

# –ù–ê–ó–í–ê–ù–ò–ï –ñ–£–†–ù–ê–õ–ê
journal_name = st.sidebar.text_input(
    "üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞", 
    value="–ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏",
    help="–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"
)

# –†–ï–ñ–ò–ú –ê–ù–ê–õ–ò–ó–ê
st.sidebar.markdown("### üéØ –†–ï–ñ–ò–ú –ê–ù–ê–õ–ò–ó–ê")
mode = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
    [
        ("‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (10-30 —Å–µ–∫)", "fast"),
        ("üéØ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (2-5 –º–∏–Ω)", "enhanced"), 
        ("üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (3-6 —Å–µ–∫)", "dynamic")
    ],
    index=0,
    format_func=lambda x: x[0]
)

# –ö–≠–®
st.sidebar.markdown("---")
if st.sidebar.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"):
    result = on_clear_cache_clicked(None)
    st.sidebar.success(result)

st.sidebar.markdown("---")
st.sidebar.markdown("**–ê–≤—Ç–æ—Ä:** xAI Grok")
st.sidebar.markdown("**–í–µ—Ä—Å–∏—è:** 2.0 (1090 —Å—Ç—Ä–æ–∫)")

# ==================== –ì–õ–ê–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨ ====================
st.title("üìä –ñ–£–†–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–óATOR")
st.markdown("**–ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä & CiteScore –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**")

# –ü–†–û–í–ï–†–ö–ê –í–í–û–î–ê
if not issn:
    st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ISSN –∂—É—Ä–Ω–∞–ª–∞!")
    st.stop()

# ==================== –ê–ù–ò–ú–ê–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò ====================
progress_bar = st.progress(0)
status_text = st.empty()

# ==================== –†–ê–°–ß–ï–¢ ====================
with st.spinner(f"üîÑ –ê–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∂–∏–º–µ **{mode}**..."):
    start_time = time.time()
    
    if mode == "fast":
        result = calculate_metrics_fast(issn, journal_name, use_cache=True)
        analysis_time = f"{time.time() - start_time:.1f} —Å–µ–∫"
        mode_class = "fast-mode"
        
    elif mode == "enhanced":
        result = calculate_metrics_enhanced(issn, journal_name, use_cache=True)
        analysis_time = f"{time.time() - start_time:.1f} —Å–µ–∫"
        mode_class = "precise-mode"
        
    else:  # dynamic
        result = calculate_metrics_dynamic(issn, journal_name, use_cache=True)
        analysis_time = f"{time.time() - start_time:.1f} —Å–µ–∫"
        mode_class = "dynamic-mode"

# ==================== –û–®–ò–ë–ö–ê ====================
if result is None:
    st.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ISSN.")
    st.stop()

# ==================== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò ====================
st.markdown(f"**‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:** {analysis_time}")

col1, col2, col3 = st.columns([1, 1, 1])

with col1:
    st.markdown(f"""
    <div class="metric-card {mode_class}">
        <h3>üìà –ò–ú–ü–ê–ö–¢-–§–ê–ö–¢–û–†</h3>
        <h1>{result['current_if']:.3f}</h1>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown(f"""
    <div class="metric-card {mode_class}">
        <h3>üìä CITE SCORE</h3>
        <h1>{result['current_citescore']:.3f}</h1>
    </div>
    """, unsafe_allow_html=True)

with col3:
    st.markdown(f"""
    <div class="metric-card {mode_class}">
        <h3>üìÖ –î–ê–¢–ê</h3>
        <h1>{result['analysis_date'].strftime('%d.%m.%Y')}</h1>
    </div>
    """, unsafe_allow_html=True)

# ==================== –ü–†–û–ì–ù–û–ó–´ ====================
st.markdown("---")
st.subheader("üîÆ –ü–†–û–ì–ù–û–ó–´ –ù–ê –ö–û–ù–ï–¶ 2025")

col4, col5 = st.columns(2)

with col4:
    st.markdown("**–ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä**")
    if_forecast = result['if_forecasts']['balanced']
    st.metric("–ë–∞–ª–∞–Ω—Å", f"{if_forecast:.3f}", 
              delta=f"{result['if_forecasts']['optimistic']:.3f}")

with col5:
    st.markdown("**CiteScore**")
    cs_forecast = result['citescore_forecasts']['balanced']
    st.metric("–ë–∞–ª–∞–Ω—Å", f"{cs_forecast:.3f}", 
              delta=f"{result['citescore_forecasts']['optimistic']:.3f}")

# ==================== –ü–ï–†–ò–û–î–´ –ê–ù–ê–õ–ò–ó–ê ====================
st.markdown("---")
display_periods(result, mode)

# ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================
display_validation(result)

# ==================== –ì–†–ê–§–ò–ö–ò ====================
st.markdown("---")
display_charts(result, mode)

# ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================
st.markdown("---")
display_statistics(result, mode)

# ==================== –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ====================

def display_periods(result, mode):
    """–û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ü–ï–†–ò–û–î–û–í"""
    st.subheader("üìÖ –ü–ï–†–ò–û–î–´ –ê–ù–ê–õ–ò–ó–ê")
    
    if mode == "dynamic":
        # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô
        if_details = result['if_details']
        cs_details = result['cs_details']
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style="background:#e8f5e8; padding:1rem; border-radius:10px; border-left:5px solid #4caf50;">
                <h4>üìà –ò–ú–ü–ê–ö–¢-–§–ê–ö–¢–û–†</h4>
            </div>
            """, unsafe_allow_html=True)
            
            art_start, art_end = if_details['periods']['articles']
            cite_start, cite_end = if_details['periods']['citations']
            
            st.markdown(f"""
            **üìö –°—Ç–∞—Ç—å–∏:** {if_details['articles_count']}<br>
            **üìÖ {art_start} ‚Üí {art_end}**<br><br>
            
            **üîó –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {if_details['citations_count']}<br>
            **üìÖ {cite_start} ‚Üí {cite_end}**
            """)
        
        with col2:
            st.markdown("""
            <div style="background:#e8f5e8; padding:1rem; border-radius:10px; border-left:5px solid #4caf50;">
                <h4>üìä CITE SCORE</h4>
            </div>
            """, unsafe_allow_html=True)
            
            art_start, art_end = cs_details['periods']['articles']
            cite_start, cite_end = cs_details['periods']['citations']
            
            st.markdown(f"""
            **üìö –°—Ç–∞—Ç—å–∏:** {cs_details['articles_count']}<br>
            **üìÖ {art_start} ‚Üí {art_end}**<br><br>
            
            **üîó –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {cs_details['citations_count']}<br>
            **üìÖ {cite_start} ‚Üí {cite_end}**
            """)
            
    else:
        # –ë–´–°–¢–†–´–ô/–¢–û–ß–ù–´–ô
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style="background:#fff3cd; padding:1rem; border-radius:10px; border-left:5px solid #ffc107;">
                <h4>üìà –ò–ú–ü–ê–ö–¢-–§–ê–ö–¢–û–†</h4>
            </div>
            """, unsafe_allow_html=True)
            
            years = result['if_publication_years']
            st.markdown(f"""
            **üìö –°—Ç–∞—Ç—å–∏:** {result['total_articles_if']}<br>
            **üìÖ {years[0]} ‚Üí {years[1]}**<br><br>
            
            **üîó –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {result['total_cites_if']}<br>
            **üìÖ 2025-01-01 ‚Üí {result['analysis_date'].strftime('%d.%m.%Y')}**
            """)
        
        with col2:
            st.markdown("""
            <div style="background:#fff3cd; padding:1rem; border-radius:10px; border-left:5px solid #ffc107;">
                <h4>üìä CITE SCORE</h4>
            </div>
            """, unsafe_allow_html=True)
            
            years = result['cs_publication_years']
            st.markdown(f"""
            **üìö –°—Ç–∞—Ç—å–∏:** {result['total_articles_cs']}<br>
            **üìÖ {years[0]} ‚Üí {years[-1]}**<br><br>
            
            **üîó –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {result['total_cites_cs']}<br>
            **üìÖ {years[0]}-01-01 ‚Üí {result['analysis_date'].strftime('%d.%m.%Y')}**
            """)

def display_validation(result):
    """–û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò"""
    st.subheader("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø")
    
    validation = result['validation']
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("IF –¢–æ—á–Ω–æ—Å—Ç—å", validation['if_accuracy'])
    
    with col2:
        st.metric("CS –¢–æ—á–Ω–æ—Å—Ç—å", validation['cs_accuracy'])
    
    with col3:
        st.success(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {validation['confidence']}")

def display_charts(result, mode):
    """–ì–†–ê–§–ò–ö–ò"""
    st.subheader("üìà –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø")
    
    # –ü–†–û–ì–ù–û–ó–´
    fig_forecast = make_subplots(
        rows=1, cols=2,
        subplot_titles=('–ò–§ –ü—Ä–æ–≥–Ω–æ–∑—ã', 'CS –ü—Ä–æ–≥–Ω–æ–∑—ã'),
        specs=[[{"type": "bar"}, {"type": "bar"}]]
    )
    
    scenarios = ['conservative', 'balanced', 'optimistic']
    colors = ['#ff6b6b', '#4ecdc4', '#45b7d1']
    
    # –ò–§
    for i, scenario in enumerate(scenarios):
        fig_forecast.add_trace(
            go.Bar(x=[scenario], y=[result['if_forecasts'][scenario]],
                   name=scenario, marker_color=colors[i]),
            row=1, col=1
        )
    
    # CS
    for i, scenario in enumerate(scenarios):
        fig_forecast.add_trace(
            go.Bar(x=[scenario], y=[result['citescore_forecasts'][scenario]],
                   name=scenario, marker_color=colors[i], showlegend=False),
            row=1, col=2
        )
    
    fig_forecast.update_layout(height=400, showlegend=False)
    st.plotly_chart(fig_forecast, use_container_width=True)
    
    # –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–ï–ó–û–ù–ù–û–°–¢–ò
    if mode != "dynamic":
        fig_seasonal = go.Figure()
        months = list(range(1, 13))
        coeffs = list(result['seasonal_coefficients'].values())
        
        fig_seasonal.add_trace(go.Scatter(
            x=months, y=coeffs, mode='lines+markers',
            name='–°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã'
        ))
        
        fig_seasonal.update_layout(
            title="üìä –°–µ–∑–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            xaxis_title="–ú–µ—Å—è—Ü", yaxis_title="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"
        )
        st.plotly_chart(fig_seasonal, use_container_width=True)

def display_statistics(result, mode):
    """–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê"""
    st.subheader("üìã –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    
    if mode == "dynamic":
        # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô - –û–¢–î–ï–õ–¨–ù–´–ï –¢–ê–ë–´
        tab1, tab2 = st.tabs(["üìà –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä", "üìä CiteScore"])
        
        with tab1:
            df_if = pd.DataFrame(result['if_citation_data'])
            if not df_if.empty:
                st.dataframe(df_if, use_container_width=True, height=400)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        with tab2:
            df_cs = pd.DataFrame(result['cs_citation_data'])
            if not df_cs.empty:
                st.dataframe(df_cs, use_container_width=True, height=400)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
    else:
        # –ë–´–°–¢–†–´–ô/–¢–û–ß–ù–´–ô - –ö–û–õ–û–ù–ö–ò
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìà –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä")
            df_if = pd.DataFrame(result['if_citation_data'])
            if not df_if.empty:
                st.dataframe(df_if, use_container_width=True, height=400)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–§")
        
        with col2:
            st.markdown("### üìä CiteScore")
            df_cs = pd.DataFrame(result['cs_citation_data'])
            if not df_cs.empty:
                st.dataframe(df_cs, use_container_width=True, height=400)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CS")

# ==================== –§–£ÌÑ∞ ====================
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666; padding: 1rem;'>"
    "üöÄ –ñ—É—Ä–Ω–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä v2.0 | xAI Grok | 1090 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞"
    "</div>", 
    unsafe_allow_html=True
)
