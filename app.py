import streamlit as st
import pandas as pd
import numpy as np
import time
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–π –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
from journal_analyzer import (
    get_issn_by_name, 
    calculate_metrics_enhanced,
    detect_journal_field,
    on_clear_cache_clicked
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Journal Metrics Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #1E88E5;
        margin-bottom: 1rem;
    }
    .forecast-box {
        background-color: #e3f2fd;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #ffc107;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown('<h1 class="main-header">üìä –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ú–µ—Ç—Ä–∏–∫ –ñ—É—Ä–Ω–∞–ª–∞</h1>', unsafe_allow_html=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏–∑–∞"):
        st.markdown("""
        **–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
        - ‚úÖ –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ reference-list
        - ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        - ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
        - ‚úÖ –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–±—É—Ç—Å—Ç—Ä—ç–ø-–º–µ—Ç–æ–¥)
        - ‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–µ–π
        - ‚úÖ –ú—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        - ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∂—É—Ä–Ω–∞–ª–∞
        """)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.sidebar:
        st.header("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        input_type = st.radio(
            "–¢–∏–ø –≤–≤–æ–¥–∞:",
            ["ISSN –∂—É—Ä–Ω–∞–ª–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞"]
        )
        
        if input_type == "ISSN –∂—É—Ä–Ω–∞–ª–∞":
            issn_input = st.text_input(
                "ISSN (—Ñ–æ—Ä–º–∞—Ç: XXXX-XXXX):",
                value="2411-1414",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1548-7660"
            )
            journal_name_input = ""
        else:
            journal_name_input = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:",
                value="Nature",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Nature –∏–ª–∏ Science"
            )
            issn_input = ""
        
        use_cache = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à", value=True)
        analysis_type = st.selectbox(
            "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            ["–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑", "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"]
        )
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        analyze_button = st.button(
            "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
            type="primary",
            use_container_width=True
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", use_container_width=True):
            on_clear_cache_clicked(None)
            st.success("–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
        
        st.markdown("---")
        st.markdown("""
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**
        - Crossref API
        - OpenAlex API
        - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        """)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if analyze_button:
        if not issn_input and not journal_name_input:
            st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ISSN –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        with st.spinner("üîÑ –ó–∞–ø—É—Å–∫ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..."):
            try:
                # –ü–æ–ª—É—á–∞–µ–º ISSN –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                if journal_name_input and not issn_input:
                    with st.status("–ü–æ–∏—Å–∫ –∂—É—Ä–Ω–∞–ª–∞...", expanded=True) as status:
                        st.write(f"–ü–æ–∏—Å–∫ ISSN –¥–ª—è: {journal_name_input}")
                        issn, journal_name = get_issn_by_name(journal_name_input, use_cache)
                        if issn:
                            st.success(f"–ù–∞–π–¥–µ–Ω –∂—É—Ä–Ω–∞–ª: {journal_name} (ISSN: {issn})")
                            status.update(label="–ñ—É—Ä–Ω–∞–ª –Ω–∞–π–¥–µ–Ω!", state="complete")
                        else:
                            st.error("–ñ—É—Ä–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                            return
                else:
                    issn = issn_input
                    journal_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
                with st.status("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...", expanded=True) as status:
                    st.write("üîç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—å—è—Ö...")
                    st.write("üìä –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –∏ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π...")
                    st.write("üìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
                    
                    result = calculate_metrics_enhanced(issn, journal_name, use_cache)
                    
                    if result is None:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                        return
                    
                    status.update(label="–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!", state="complete")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                display_results(result)
                
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
                st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∂—É—Ä–Ω–∞–ª–∞")

def display_results(result):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂—É—Ä–Ω–∞–ª–µ
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞", result['journal_name'])
    with col2:
        st.metric("ISSN", result['issn'])
    with col3:
        st.metric("–û–±–ª–∞—Å—Ç—å", result['journal_field'])
    
    st.markdown("---")
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", 
        "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
        "üìÖ –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å",
        "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã"
    ])
    
    with tab1:
        display_main_metrics(result)
    
    with tab2:
        display_detailed_analysis(result)
    
    with tab3:
        display_statistics(result)
    
    with tab4:
        display_seasonality_analysis(result)
    
    with tab5:
        display_parameters(result)

def display_main_metrics(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    
    st.subheader("üéØ –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä 2025")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "–¢–µ–∫—É—â–∏–π –ò–§", 
            f"{result['current_if']:.2f}",
            help="–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        )
    
    with col2:
        st.metric(
            "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", 
            f"{result['if_forecasts']['balanced']:.2f}",
            help="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–æ–Ω–µ—Ü 2025 –≥–æ–¥–∞"
        )
    
    with col3:
        st.metric(
            "–°—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", 
            f"{result['total_articles_if']}",
            help=f"–°—Ç–∞—Ç—å–∏ –∑–∞ {result['if_publication_years'][0]}-{result['if_publication_years'][1]}"
        )
    
    # –ü—Ä–æ–≥–Ω–æ–∑—ã –∏–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä–∞
    st.markdown("#### –ü—Ä–æ–≥–Ω–æ–∑—ã –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä–∞ –Ω–∞ –∫–æ–Ω–µ—Ü 2025")
    
    forecast_col1, forecast_col2, forecast_col3 = st.columns(3)
    
    with forecast_col1:
        st.markdown('<div class="forecast-box">', unsafe_allow_html=True)
        st.metric("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π", f"{result['if_forecasts']['conservative']:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with forecast_col2:
        st.markdown('<div class="forecast-box">', unsafe_allow_html=True)
        st.metric("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", f"{result['if_forecasts']['balanced']:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with forecast_col3:
        st.markdown('<div class="forecast-box">', unsafe_allow_html=True)
        st.metric("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", f"{result['if_forecasts']['optimistic']:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    st.markdown("#### –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (95%)")
    ci_lower = result['if_forecasts_ci']['lower_95']
    ci_upper = result['if_forecasts_ci']['upper_95']
    
    st.info(f"**–î–∏–∞–ø–∞–∑–æ–Ω:** [{ci_lower:.2f} - {ci_upper:.2f}]")
    
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è CiteScore
    st.subheader("üìä CiteScore 2025")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–¢–µ–∫—É—â–∏–π CiteScore", f"{result['current_citescore']:.2f}")
    
    with col2:
        st.metric("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", f"{result['citescore_forecasts']['balanced']:.2f}")
    
    with col3:
        st.metric("–°—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞", f"{result['total_articles_cs']}")

def display_detailed_analysis(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if_data = pd.DataFrame(result['if_citation_data'])
        if not if_data.empty:
            fig = px.histogram(if_data, x='–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 
                             title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –ò–§',
                             nbins=20)
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π")
        
        self_citation_rate = result['self_citation_rate']
        
        st.metric("–£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", f"{self_citation_rate:.1%}")
        st.metric("–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{result['total_self_citations']:.0f}")
        
        if self_citation_rate > 0.2:
            st.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (>20%)")
        elif self_citation_rate > 0.1:
            st.info("‚ÑπÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (10-20%)")
        else:
            st.success("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π (<10%)")

def display_statistics(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—å—è–º")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä–∞
    if result['if_citation_data']:
        st.markdown("#### –î–ª—è –∏–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä–∞")
        df_if = pd.DataFrame(result['if_citation_data'])
        if_stats = df_if.groupby('–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')['–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'].agg([
            ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π', 'count'),
            ('–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π', 'sum'),
            ('–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π', 'mean'),
            ('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', 'std')
        ]).round(2)
        st.dataframe(if_stats, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è CiteScore
    if result['cs_citation_data']:
        st.markdown("#### –î–ª—è CiteScore")
        df_cs = pd.DataFrame(result['cs_citation_data'])
        cs_stats = df_cs.groupby('–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')['–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'].agg([
            ('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π', 'count'),
            ('–í—Å–µ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π', 'sum'),
            ('–°—Ä–µ–¥–Ω–µ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π', 'mean'),
            ('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', 'std')
        ]).round(2)
        st.dataframe(cs_stats, use_container_width=True)

def display_seasonality_analysis(result):
    """–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏"""
    
    st.subheader("üìÖ –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    months = list(range(1, 13))
    month_names = [calendar.month_name[i] for i in months]
    coefficients = [result['seasonal_coefficients'].get(i, 0) for i in months]
    
    fig = go.Figure(data=[
        go.Bar(x=month_names, y=coefficients, 
               marker_color='#1E88E5',
               name='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    ])
    
    fig.update_layout(
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º',
        xaxis_title='–ú–µ—Å—è—Ü',
        yaxis_title='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç',
        showlegend=False
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    st.subheader("üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π", f"{result['multipliers']['conservative']:.2f}x")
    with col2:
        st.metric("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", f"{result['multipliers']['balanced']:.2f}x")
    with col3:
        st.metric("–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", f"{result['multipliers']['optimistic']:.2f}x")

def display_parameters(result):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
    
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ü–µ—Ä–∏–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞:**")
        st.write(f"- –ò–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä: {result['if_publication_years'][0]}-{result['if_publication_years'][1]}")
        st.write(f"- CiteScore: {result['cs_publication_years'][0]}-{result['cs_publication_years'][-1]}")
        
        st.markdown("**–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:**")
        st.write(f"- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–µ—Ç –¥–ª—è –º–æ–¥–µ–ª–∏: {len(result['citation_model_data'])}")
        st.write(f"- –†–∞–∑–º–µ—Ä –±—É—Ç—Å—Ç—Ä—ç–ø-–≤—ã–±–æ—Ä–∫–∏: 1000 –∏—Ç–µ—Ä–∞—Ü–∏–π")
        st.write(f"- –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: 95%")
    
    with col2:
        st.markdown("**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:**")
        st.write(result['analysis_date'].strftime('%d.%m.%Y'))
        
        if result['bootstrap_stats']['if_mean'] > 0:
            if_cv = result['bootstrap_stats']['if_upper'] / result['bootstrap_stats']['if_mean'] - 1
            st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –ò–§", f"{if_cv:.1%}")

if __name__ == "__main__":
    main()