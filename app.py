# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: 582
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +72 —Å—Ç—Ä–æ–∫–∏ (–ø–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

import streamlit as st
import pandas as pd
import numpy as np
import time
from datetime import datetime
import sys
import os
import re
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(__file__))

try:
    from journal_analyzer import (
        calculate_metrics_enhanced,
        calculate_metrics_fast,
        calculate_metrics_dynamic,
        on_clear_cache_clicked
    )
    JOURNAL_ANALYZER_AVAILABLE = True
except ImportError as e:
    JOURNAL_ANALYZER_AVAILABLE = False
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ journal_analyzer: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏
    def calculate_metrics_enhanced(*args, **kwargs): return None
    def calculate_metrics_fast(*args, **kwargs): return None
    def calculate_metrics_dynamic(*args, **kwargs): return None
    def on_clear_cache_clicked(*args, **kwargs): return "–ö—ç—à –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Journal Metrics Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .main-header { font-size: 2.5rem; color: #1E88E5; text-align: center; margin-bottom: 2rem; }
    .metric-card { background-color: #f8f9fa; padding: 1.5rem; border-radius: 10px; border-left: 4px solid #1E88E5; margin-bottom: 1rem; }
    .forecast-box { background-color: #e3f2fd; padding: 1rem; border-radius: 8px; margin: 0.5rem 0; border-left: 4px solid #1E88E5; }
    .citescore-forecast-box { background-color: #e8f5e8; padding: 1rem; border-radius: 8px; margin: 0.5rem 0; border-left: 4px solid #4CAF50; }
    .warning-box { background-color: #fff3cd; padding: 1rem; border-radius: 8px; border-left: 4px solid #ffc107; margin: 1rem 0; }
    .success-box { background-color: #d4edda; padding: 1rem; border-radius: 8px; border-left: 4px solid #28a745; margin: 1rem 0; }
    .section-header { color: #1E88E5; border-bottom: 2px solid #1E88E5; padding-bottom: 0.5rem; margin-top: 2rem; }
    .mode-indicator { padding: 0.5rem 1rem; border-radius: 20px; font-weight: bold; display: inline-block; margin-bottom: 1rem; }
    .fast-mode { background-color: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }
    .precise-mode { background-color: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }
    .dynamic-mode { background-color: #e1bee7; color: #4a148c; border: 1px solid #ce93d8; }
    .self-citation-highlight { background-color: #ffebee !important; }
</style>
""", unsafe_allow_html=True)

def validate_issn(issn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ISSN"""
    if not issn:
        return False
    pattern = r'^\d{4}-\d{3}[\dXx]$'
    return re.match(pattern, issn) is not None

def main():
    if not JOURNAL_ANALYZER_AVAILABLE:
        st.warning("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
    
    st.markdown('<h1 class="main-header">üìä Journal Metrics Analyzer </h1>', unsafe_allow_html=True)
    
    with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"):
        st.markdown("""
        **üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑**: 10-30 —Å–µ–∫ (—Ç–æ–ª—å–∫–æ Crossref)  
        **üéØ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑**: 15-45 —Å–µ–∫ (OpenAlex batch)  
        **üåê –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π**: 15-45 —Å–µ–∫ (OpenAlex batch)  
        ¬©Chimica Techno Acta
        """)
    
    with st.sidebar:
        st.header("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
        issn_input = st.text_input("ISSN:", value="2411-1414", help="XXXX-XXXX")
        analysis_mode = st.radio("–†–µ–∂–∏–º:", [
            "üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑", "üéØ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "üåê –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
        ])
        use_cache = st.checkbox("–ö—ç—à", value=True)
        
        analyze_button = st.button("üöÄ –ê–Ω–∞–ª–∏–∑", type="primary", use_container_width=True)
        
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", use_container_width=True):
            result_msg = on_clear_cache_clicked(None)
            st.success(result_msg)
    
    if analyze_button:
        if not validate_issn(issn_input):
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ISSN: XXXX-XXXX")
            return
        
        mode_map = {
            "–ë—ã—Å—Ç—Ä—ã–π": ("fast", "üöÄ –ë—ã—Å—Ç—Ä—ã–π"),
            "–¢–æ—á–Ω—ã–π": ("enhanced", "üéØ –¢–æ—á–Ω—ã–π"), 
            "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π": ("dynamic", "üåê –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π")
        }
        mode_key, mode_display = mode_map[analysis_mode.split()[1]]
        
        st.markdown(f'<div class="mode-indicator {mode_key}-mode">{mode_display}</div>', unsafe_allow_html=True)
        
        is_precise = mode_key in ["enhanced", "dynamic"]
        
        if is_precise:
            st.info("‚è≥ –ê–Ω–∞–ª–∏–∑ –∑–∞–π–º–µ—Ç 15-45 —Å–µ–∫—É–Ω–¥")
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            def update_progress(p):
                progress_bar.progress(p)
                status_text.text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {int(p*100)}%")
                time.sleep(0.1)  # –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–ª–∞–≤–Ω–æ—Å—Ç—å
            
            start_time = time.time()
            result = (calculate_metrics_dynamic if mode_key == "dynamic" 
                     else calculate_metrics_enhanced)(issn_input, use_cache=use_cache, 
                                                    progress_callback=update_progress)
            analysis_time = time.time() - start_time
            
            status_text.text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {analysis_time:.1f}—Å")
        else:
            with st.spinner("üîÑ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑..."):
                start_time = time.time()
                result = calculate_metrics_fast(issn_input, use_cache=use_cache)
                analysis_time = time.time() - start_time
            
            st.success(f"‚úÖ {analysis_time:.1f}—Å")
        
        if result:
            display_results(result, is_precise, mode_key)
        else:
            st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ISSN.")

def display_results(result, is_precise, mode):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    col1, col2, col3, col4 = st.columns(4)
    with col1: st.metric("–ñ—É—Ä–Ω–∞–ª", result['journal_name'])
    with col2: st.metric("ISSN", result['issn'])
    with col3: st.metric("–û–±–ª–∞—Å—Ç—å", result['journal_field'])
    with col4: st.metric("–†–µ–∂–∏–º", mode)
    
    tabs = st.tabs(["üìà –ú–µ—Ç—Ä–∏–∫–∏", "üìä –î–µ—Ç–∞–ª–∏", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    
    with tabs[0]:
        display_main_metrics(result)
    
    with tabs[1]:
        display_detailed_analysis(result)
    
    with tabs[2]:
        display_statistics(result)

def display_main_metrics(result):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    st.markdown('<h3 class="section-header">üéØ –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä</h3>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1: st.metric("–ò–§", f"{result['current_if']:.2f}")
    with col2: st.metric("–°—Ç–∞—Ç—å–∏", result['total_articles_if'])
    with col3: st.metric("–¶–∏—Ç–∞—Ç—ã", result['total_cites_if'])
    with col4: 
        self_rate = result['self_citations_if'] / max(result['total_cites_if'], 1)
        st.metric("–°–∞–º–æ—Ü–∏—Ç—ã", f"{self_rate:.1%}", 
                 delta=f"{result['self_citations_if']}")
        if self_rate > 0.2:
            st.markdown('<span style="color:red">‚ö†Ô∏è –í—ã—Å–æ–∫–∏–µ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</span>', unsafe_allow_html=True)
    
    st.markdown('<h3 class="section-header">üìä CiteScore</h3>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1: st.metric("CS", f"{result['current_citescore']:.2f}")
    with col2: st.metric("–°—Ç–∞—Ç—å–∏", result['total_articles_cs'])
    with col3: st.metric("–¶–∏—Ç–∞—Ç—ã", result['total_cites_cs'])
    with col4:
        self_rate_cs = result['self_citations_cs'] / max(result['total_cites_cs'], 1)
        st.metric("–°–∞–º–æ—Ü–∏—Ç—ã", f"{self_rate_cs:.1%}", 
                 delta=f"{result['self_citations_cs']}")

def display_detailed_analysis(result):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà –ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä")
        df_if = pd.DataFrame(result['if_citation_data'])
        df_if['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'] = df_if['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'].apply(
            lambda x: x.strftime('%Y-%m-%d') if x else '–ù–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å'
        )
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
        def highlight_self_cite(row):
            return ['background-color: #ffebee'] * len(row) if row['–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'] == '–î–∞' else [''] * len(row)
        
        st.dataframe(df_if.style.apply(highlight_self_cite, axis=1), use_container_width=True)
    
    with col2:
        st.subheader("üìä CiteScore")
        df_cs = pd.DataFrame(result['cs_citation_data'])
        df_cs['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'] = df_cs['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'].apply(
            lambda x: x.strftime('%Y-%m-%d') if x else '–ù–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å'
        )
        st.dataframe(df_cs.style.apply(highlight_self_cite, axis=1), use_container_width=True)

def display_statistics(result):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ò–º–ø–∞–∫—Ç-–§–∞–∫—Ç–æ—Ä**")
        if_data = pd.DataFrame(result['if_citation_data'])
        self_if = if_data[if_data['–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'] == '–î–∞']
        st.metric("–í—Å–µ–≥–æ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", len(self_if))
        st.metric("–î–æ–ª—è —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", f"{len(self_if)/max(len(if_data),1):.1%}")
        
        if len(self_if) > 0:
            st.dataframe(self_if[['DOI', '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ']], use_container_width=True)
    
    with col2:
        st.markdown("**CiteScore**")
        cs_data = pd.DataFrame(result['cs_citation_data'])
        self_cs = cs_data[cs_data['–°–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'] == '–î–∞']
        st.metric("–í—Å–µ–≥–æ —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", len(self_cs))
        st.metric("–î–æ–ª—è —Å–∞–º–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", f"{len(self_cs)/max(len(cs_data),1):.1%}")
        
        if len(self_cs) > 0:
            st.dataframe(self_cs[['DOI', '–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ']], use_container_width=True)
    
    # –í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    st.subheader("‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    if_data = pd.DataFrame(result['if_citation_data'])
    if_data_with_time = if_data.dropna(subset=['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'])
    
    if not if_data_with_time.empty:
        if_data_with_time['–î–Ω–∏ –¥–æ —Ü–∏—Ç–∞—Ç—ã'] = pd.to_datetime(if_data_with_time['–í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è']) - \
                                           pd.to_datetime(if_data_with_time['–ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'], format='%Y').dt.normalize()
        median_days = if_data_with_time['–î–Ω–∏ –¥–æ —Ü–∏—Ç–∞—Ç—ã'].dt.days.median()
        st.metric("–ú–µ–¥–∏–∞–Ω–∞ (–¥–Ω–∏)", f"{median_days:.0f}")
        
        st.bar_chart(if_data_with_time['–î–Ω–∏ –¥–æ —Ü–∏—Ç–∞—Ç—ã'].dt.days)

if __name__ == "__main__":
    main()
